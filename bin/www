#!/usr/bin/env node
require('dotenv').config();
var fs = require('fs');
var app = require('../app');
var debug = require('debug')('spotify-stat:server');

/**
* nonssl server
*/
var http = require('http');
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
var server = http.createServer(app);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
server.on('listening', ()=> {
  onListening(port);
});

/**
* ssl server
*/
var https = require('https');
var port_ssl = normalizePort(process.env.PORT_SSL || '443');
app.set('port_ssl', port_ssl);
var privateKey  = fs.readFileSync('../key.pem', 'utf8');
var certificate = fs.readFileSync('../cert.pem', 'utf8');
var credentials = {key: privateKey, cert: certificate};
var sslServer = https.createServer(credentials, app);
sslServer.listen(port_ssl);
sslServer.on('error', onError);
sslServer.on('listening', ()=> {
  onListening(port_ssl);
});

/**
 * app settings
 */
// app.set('query parser', true);

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening(port_value) {
  var current_server = (port_value === port_ssl) ? sslServer : server;
  var addr = current_server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
